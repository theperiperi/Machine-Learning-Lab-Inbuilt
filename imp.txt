from sklearn.neighbors import KNeighborsClassifier

from sklearn.cluster import KMeans
data_cluster=df[["radius_mean","texture_mean"]]
kmeans=KMeans(n_clusters=2,random_state=42)
df["cluster"]=kmeans.fit_predict(data_cluster)
centroids=kmeans.cluster_centers_

from sklearn.decomposition import PCA
pca=PCA(n_components=2)
explained_variance_ratio=pca.explained_variance_ratio_

from sklearn.naive_bayes import GaussianNB

from sklearn.tree import DecisionTreeClassifier

from sklearn.linear_model import Perceptron

from sklearn.neural_network import MLPClassifier
mlp_classifier = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=1000, random_state=42)

l1: alpha=0.01
l2: alpha=0.0001
no reg: alpha=0
early_stopping:=True 

X_noisy = X + np.random.normal(0, 0.05, X.shape)
X_combined = np.vstack((X, X_noisy))
y_combined = np.hstack((y, y))  # Use original labels for both original and noisy data

X_noisy = X_train + np.random.normal(0, 0.05, X_train.shape)
X_augmented = np.vstack((X_train, X_noisy))
y_augmented = np.hstack((y_train, y_train))