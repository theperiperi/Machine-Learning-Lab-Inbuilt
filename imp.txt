from sklearn.neighbors import KNeighborsClassifier

from sklearn.cluster import KMeans
data_cluster=df[["radius_mean","texture_mean"]]
kmeans=KMeans(n_clusters=2)
df["cluster"]=kmeans.fit_predict(data_cluster)
centroids=kmeans.cluster_centers_

from sklearn.decomposition import PCA
pca=PCA(n_components=2)
explained_variance_ratio=pca.explained_variance_ratio_

from sklearn.naive_bayes import GaussianNB

from sklearn.tree import DecisionTreeClassifier

from sklearn.linear_model import Perceptron

from sklearn.neural_network import MLPClassifier
mlp_classifier = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=1000)

l1: alpha=0.01
l2: alpha=0.0001
no reg: alpha=0
early_stopping:=True 
augmented:from imblearn.over_sampling import SMOTE
smote = SMOTE(random_state=42)
X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)
+noise:X_train =X_train+ np.random.normal(0, 0.1, X_train.shape)  # Mean 0, Standard deviation 0.1

optimization: solver:adam,sgd,lbfgs, mini batch batch_size 

from sklearn.svm import SVC
from sklearn.model_selection import GridSearchCV
param_grid = {
    'C': [0.1, 1, 10, 100],
    'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],
    'gamma': ['scale', 'auto']
}grid_search = GridSearchCV(estimator=SVC(), param_grid=param_grid)
fit best_params = grid_search.best_params_
best_model = grid_search.best_estimator_
y_pred = best_model.predict(X_test)


from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
rmse_svr = np.sqrt(mean_squared_error(y_test, y_pred_svr))
linear_reg = LinearRegression()
